<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Kadane's Algorithm Visualization</title>
<style>
  /* Page styling for a centered layout */
  body {
    font-family: Arial, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    background: linear-gradient(135deg, #f7f7f7, #e0e0e0);
  }

  /* Container styling for visualization area */
  #container {
    text-align: center;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
    background-color: #ffffff;
    width: 90%;
    max-width: 600px;
  }

  /* Styling array elements */
  .array-element {
    display: inline-block;
    margin: 10px 5px;
    padding: 10px 15px;
    border-radius: 5px;
    font-size: 1.1em;
    font-weight: bold;
    color: #333;
    transition: all 0.3s ease;
  }

  /* Highlight styles for current and global max */
  .highlight {
    background-color: #ffa726; /* orange */
  }
  .global-highlight {
    background-color: #42a5f5; /* blue */
    color: white;
  }

  /* Information box styling */
  #info {
    margin-top: 20px;
    font-size: 1.1em;
    color: #333;
  }

  /* Button styling */
  button {
    margin-top: 20px;
    padding: 10px 20px;
    font-size: 1em;
    font-weight: bold;
    color: white;
    background-color: #42a5f5;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
  }
  button:hover {
    background-color: #2196f3;
  }
</style>
</head>
<body>
<div id="container">
  <h2>Kadane's Algorithm Visualization</h2>
  <div id="array"></div>
  <div id="info">
    Current Max Sum: <span id="current-max">0</span> <br>
    Max Subarray Sum So Far: <span id="max-sum">0</span>
  </div>
  <button onclick="startKadane()">Start Visualization</button>
</div>

<script>
  // Initial array and Kadane's Algorithm variables
  const arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4];
  let maxSumGlobal = arr[0];
  let maxSumCurrent = arr[0];
  let currentIndex = 0;

  // Function to create and display array elements
  function createArrayDisplay() {
    const arrayContainer = document.getElementById('array');
    arrayContainer.innerHTML = ''; // Clear existing elements

    arr.forEach((num, index) => {
      const element = document.createElement('div');
      element.classList.add('array-element');
      element.id = `element-${index}`;
      element.textContent = num;
      arrayContainer.appendChild(element);
    });
  }

  // Function to update display with current algorithm state
  function updateDisplay() {
    document.getElementById('current-max').textContent = maxSumCurrent;
    document.getElementById('max-sum').textContent = maxSumGlobal;

    // Remove highlights from all elements
    arr.forEach((_, index) => {
      const element = document.getElementById(`element-${index}`);
      element.classList.remove('highlight', 'global-highlight');
    });

    // Highlight the current element and global max if updated
    if (currentIndex > 0) {
      document.getElementById(`element-${currentIndex - 1}`).classList.remove('highlight');
    }
    document.getElementById(`element-${currentIndex}`).classList.add('highlight');
    if (maxSumCurrent === maxSumGlobal) {
      document.getElementById(`element-${currentIndex}`).classList.add('global-highlight');
    }
  }

  // Function to handle each step in Kadane's Algorithm
  function kadaneStep() {
    if (currentIndex >= arr.length) {
      return;
    }

    maxSumCurrent = Math.max(arr[currentIndex], maxSumCurrent + arr[currentIndex]);
    maxSumGlobal = Math.max(maxSumGlobal, maxSumCurrent);
    updateDisplay();

    currentIndex++;
    if (currentIndex < arr.length) {
      setTimeout(kadaneStep, 1000); // Adjust speed by changing delay time
    }
  }

  // Function to start Kadane's Algorithm visualization
  function startKadane() {
    currentIndex = 0;
    maxSumGlobal = arr[0];
    maxSumCurrent = arr[0];
    updateDisplay();
    kadaneStep();
  }

  // Initialize array display on load
  createArrayDisplay();
</script>
</body>
</html>

